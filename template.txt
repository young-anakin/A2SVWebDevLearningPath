
def prime_sieve(n: int) -> list[bool]:
   is_prime: list[bool] = [True for _ in range(n + 1)]
   is_prime[0] = is_prime[1] = False

   i = 2
   while i * i <= n:
       if is_prime[i]:
           j = i * i
           while j <= n:
               is_prime[j] = False
               j += i
       i += 1

   return is_prime



fun gcd(a, b):
   if b == 0:
       return a
   return gcd(b, a % b)

def isPrime(x: int) -> bool:
 d = 2
 while d*d <= x:
 if x % d == 0:
 return False
 d += 1
 return True

def trial_division_simple(n: int) -> list[int]:
 factorization: list[int] = []
 d = 2
 while d * d <= n:
 while n % d == 0:
 factorization.append(d)
 n //= d
 d += 1
 if n > 1:
 factorization.append(n)
 
 return factorization

import io,os
input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline

import sys
input = sys.stdin.readline

sys.stdout.write(str(n) + "\n")



from collections import defaultdict
t = int(input()) # number of test cases
for _ in range(t):
 # number of nodes and edges
 n, m = map(int, input().split())
 graph = defaultdict(list)
 for j in range(m):
 u, v = map(int, input().split())
 graph[u].append(v)
 graph[v].append(u)


t = int(input()) # number of test cases
for _ in range(t):
 # number of nodes and edges
 n, m = map(int, input().split())
 graph = [[] for _ in range(n)]
 for j in range(m):
 u, v = map(int, input().split())
 graph[u - 1].append(v - 1)
 graph[v - 1].append(u - 1)